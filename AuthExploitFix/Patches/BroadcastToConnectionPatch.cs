namespace AuthExploitFix.Patches
{
    using System.Collections.Generic;

    using Exiled.API.Features;

    using HarmonyLib;

    using Mirror;

    using UnityEngine;

    [HarmonyPatch(typeof(NetworkServer), nameof(NetworkServer.BroadcastToConnection))]
    internal class BroadcastToConnectionPatch
    {
        private static readonly List<NetworkConnectionToClient> NullConnections = new List<NetworkConnectionToClient>();

        private static bool Prefix(NetworkConnectionToClient connection)
        {
            foreach (NetworkIdentity item in connection.observing)
            {
                if (item != null)
                {
                    NetworkWriter networkWriter = NetworkServer.SerializeForConnection(item, connection);
                    if (networkWriter != null)
                    {
                        EntityStateMessage entityStateMessage = default(EntityStateMessage);
                        entityStateMessage.netId = item.netId;
                        entityStateMessage.payload = networkWriter.ToArraySegment();
                        EntityStateMessage message = entityStateMessage;
                        connection.Send(message);
                    }
                }
                else
                {
                    Debug.LogWarning($"Found 'null' entry in observing list for connectionId={connection.connectionId}. Please call NetworkServer.Destroy to destroy networked objects. Don't use GameObject.Destroy.");
                    
                    if (!NullConnections.Contains(connection))
                        NullConnections.Add(connection);

                    NetworkServer.Destroy(item.gameObject);

                    if (NullConnections.Count > 50)
                    {
                        Log.Error("Too many nulls in NetworkConnectionToClient. Restarting server.");
                        
                        Server.Restart();
                    }
                }
            }

            return false;
        }
    }
}
